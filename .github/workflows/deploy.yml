# Prior to releases, this will run additional stress tests, plus tests for all supported versions of
# the requests library. Expected runtime is upwards of 20mins depending on runner availability,
# which is why these are only run for releases.
name: Deploy

on:
  push:
    tags: ['v*']
  workflow_dispatch:
    inputs:
      pre-release-suffix:
        description: 'Version suffix for pre-releases ("a", "b", "rc", etc.)'
        required: false
        default: 'dev'
      pre-release-version:
        description: 'Version number for pre-releases; defaults to build number'
        required: false
        default: ''
      skip-stress:
        description: 'Set to "true" to skip stress tests'
        required: false
        default: 'false'
      skip-publish:
        description: 'Set to "true" to skip publishing to PyPI'
        required: false
        default: 'false'

env:
  PYTEST_VERBOSE: 'true'
  STRESS_TEST_MULTIPLIER: 7

jobs:
  # Run additional integration stress tests
  test-stress:
    if: ${{ github.event.inputs.skip-stress != 'true' }}
    runs-on: ubuntu-latest

    services:
      nginx:
        image: kennethreitz/httpbin
        ports:
          - 8080:80

    steps:
      # Install dependencies, with caching
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: uv.lock
      - name: Install dependencies
        run: |
          uv python install ${{ matrix.python-version }}
          uv sync --all-extras

      # Start integration test databases
      - uses: supercharge/mongodb-github-action@90004df786821b6308fb02299e5835d0dae05d0d
        with:
          mongodb-version: 5.0
      - uses: supercharge/redis-github-action@ea9b21c
        with:
          redis-version: 6
      - uses: rrainn/dynamodb-action@52f028
      # Run tests

      - name: Run stress tests
        run: uv run nox -e stress -- ${{ env.STRESS_TEST_MULTIPLIER }}

  # Run unit tests without any optional dependencies installed
  test-minimum-deps:
    runs-on: ubuntu-latest

    steps:
      # Install dependencies
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v5
      - name: Install dependencies
        run: |
          uv python install ${{ matrix.python-version }}
          uv sync

      # Run tests
      - name: Run tests with no optional dependencies
        run: uv run pytest -n auto tests/unit

  # Run unit tests for all supported platforms and python versions
  # On python 3.11, run tests for all supported requests versions
  test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version:
          ['3.13', '3.12', '3.11', '3.10', '3.9', '3.8', 'pypy3.9', 'pypy3.10']
        requests-version: [latest]
        exclude:
          - os: windows-latest
            python-version: 'pypy3.9'
        # TODO: Could this be less verbose? Maybe a dynamic matrix? Also, env isn't supported here.
        include:
          - python-version: '3.11'
            os: ubuntu-latest
            requests-version: '2.22'
          - python-version: '3.11'
            os: ubuntu-latest
            requests-version: '2.23'
          - python-version: '3.11'
            os: ubuntu-latest
            requests-version: '2.24'
          - python-version: '3.11'
            os: ubuntu-latest
            requests-version: '2.25'
          - python-version: '3.11'
            os: ubuntu-latest
            requests-version: '2.26'
          - python-version: '3.11'
            os: ubuntu-latest
            requests-version: '2.27'
          - python-version: '3.11'
            os: ubuntu-latest
            requests-version: '2.28'
          - python-version: '3.11'
            os: ubuntu-latest
            requests-version: '2.29'
          - python-version: '3.11'
            os: ubuntu-latest
            requests-version: '2.30'
          - python-version: '3.11'
            os: ubuntu-latest
            requests-version: '2.31'
          - python-version: '3.11'
            os: ubuntu-latest
            requests-version: '2.32'
      fail-fast: false
    defaults:
      run:
        shell: bash
    runs-on: ${{ matrix.os }}

    steps:
      # Install dependencies, with caching
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: uv.lock
      - name: Install dependencies
        run: |
          uv python install ${{ matrix.python-version }}
          uv sync --all-extras
          if [[ "${{ matrix.requests-version }}" != "latest" ]]; then
            uv pip install requests==${{ matrix.requests-version }};
          fi

      # Run tests
      - name: Run tests
        run: uv run pytest -n auto tests/unit

  # Deploy stable builds on tags only, and pre-release builds from manual trigger ("workflow_dispatch")
  release:
    if: ${{ github.event.inputs.skip-publish != 'true' }}
    needs: [test, test-minimum-deps]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v5

      - name: Set pre-release version
        if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
        env:
          pre-release-suffix: ${{ github.event.inputs.pre-release-suffix || 'dev' }}
          pre-release-version: ${{ github.event.inputs.pre-release-version || github.run_number }}
        run: |
          PKG_VERSION=$(uvx --from=toml-cli toml get --toml-path=pyproject.toml project.version)
          DEV_VERSION=$PKG_VERSION.${{ env.pre-release-suffix }}${{ env.pre-release-version }}
          echo "Setting pre-release version to $DEV_VERSION"
          uvx --from=toml-cli toml set --toml-path=pyproject.toml project.version $DEV_VERSION

      - name: Build package distributions
        run: uv build
      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
