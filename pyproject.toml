[tool.poetry]
name = "requests-cache"
version = "1.3.0"
description = "A persistent cache for python requests"
authors = ["Roman Haritonov", "Jordan Cook"]
license = "BSD-2-Clause"
readme = "README.md"
documentation = "https://requests-cache.readthedocs.io"
homepage = "https://github.com/requests-cache/requests-cache"
repository = "https://github.com/requests-cache/requests-cache"
keywords = [
    "requests",
    "python-requests",
    "cache",
    "http",
    "http-client",
    "web",
    "webscraping",
    "performance",
    "sqlite",
    "redis",
    "mongodb",
    "gridfs",
    "dynamodb",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]
include = [
    {format="sdist", path="*.md"},
    {format="sdist", path="*.yml"},
    {format="sdist", path="docs"},
    {format="sdist", path="examples"},
    {format="sdist", path="tests"},
]

[tool.poetry.urls]
"Changelog" = "https://requests-cache.readthedocs.io/en/stable/project_info/history.html"
"Issues" = "https://github.com/requests-cache/requests-cache/issues"

[tool.poetry.dependencies]
python        = ">=3.8"

# Required dependencies
requests      = ">=2.22"   # Needs no introduction
urllib3       = ">=1.25.5" # Use a slightly newer version than required by requests (for bugfixes)
attrs         = ">=21.2"   # For response data models
cattrs        = ">=22.2"   # For response serialization
platformdirs  = ">=2.5"    # For features that use platform-specific system directories
url-normalize = ">=1.4"    # For more accurate request matching

# Optional backend dependencies
boto3                      = {optional=true, version=">=1.15"}
botocore                   = {optional=true, version=">=1.18"}
pymongo                    = {optional=true, version=">=3"}  # also provides bson serialization package
redis                      = {optional=true, version=">=3"}

# Optional serialization dependencies
itsdangerous               = {optional=true, version=">=2.0"}
orjson                     = {optional=true, version=">=3.0", markers = "implementation_name != 'pypy'"}
pyyaml                     = {optional=true, version=">=6.0.1"}
ujson                      = {optional=true, version=">=5.4"}

[tool.poetry.extras]
# Package extras for optional backend dependencies
dynamodb = ["boto3", "botocore"]
mongodb  = ["pymongo"]
redis    = ["redis"]

# Package extras for optional seriazliation dependencies
security = ["itsdangerous"]
yaml     = ["pyyaml"]

# All optional packages combined, for demo/evaluation purposes
all = [
    "boto3",
    "botocore",
    "itsdangerous",
    "orjson",
    "pymongo",
    "pyyaml",
    "redis",
    "ujson",
]

[tool.poetry.group.dev.dependencies]
# For unit + integration tests
coverage              = "^7.1"
psutil                = ">=5,<8"
pytest                = "^8.0"
pytest-clarity        = "^1.0.1"
pytest-cov            = ">=3.0"
pytest-rerunfailures  = ">=10.1"
pytest-xdist          = ">=2.2"
requests-mock         = "^1.12"
responses             = ">=0.19"
tenacity              = "^8.0"
timeout-decorator     = "^0.5"
time-machine          = {version = "^2.9", markers = "implementation_name != 'pypy'"}

# Tools for linting, type checking, etc. are managed with pre-commit
pre-commit            = "^3.5"

# For convenience in local development
nox                   = "^2023.4"
# TODO: Remove the 'python' constraint once nox-poetry drops its own constraint
# https://github.com/cjolowicz/nox-poetry/pull/1213
nox-poetry            = {version = "^1.0.0", python = "<4"}
rich                  = ">=10.0"

# Documentation dependencies needed for Readthedocs builds
[tool.poetry.group.docs.dependencies]
furo                       = {python=">=3.10", version="^2024.8"}
linkify-it-py              = {python=">=3.10", version=">=2.0"}
myst-parser                = {python=">=3.10", version=">=3.0"}
sphinx                     = {python=">=3.10", version="^8.0.2"}
sphinx-autobuild           = {python=">=3.10", version="^2024.9"}
sphinx-autodoc-typehints   = {python=">=3.10", version="^2.4"}
sphinx-automodapi          = {python=">=3.10", version="^0.18"}
sphinx-copybutton          = {python=">=3.10", version=">=0.5"}
sphinx-design              = {python=">=3.10", version=">=0.6"}
sphinx-notfound-page       = {python=">=3.10", version=">=1.0"}
sphinxcontrib-apidoc       = {python=">=3.10", version=">=0.3"}
sphinxext-opengraph        = {python=">=3.10", version=">=0.9"}

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.coverage.html]
directory = 'test-reports'

[tool.coverage.xml]
output = 'test-reports/coverage.xml'

[tool.coverage.run]
branch = true
source = ['requests_cache']
omit = [
    'requests_cache/__init__.py',
    'requests_cache/backends/__init__.py',
    'requests_cache/models/__init__.py',
    'requests_cache/serializers/__init__.py',
]

[tool.coverage.report]
exclude_lines = [
    'pragma: no cover',
    'if TYPE_CHECKING:',
    'if logger.level',
    'except ImportError:',
]

[tool.mypy]
python_version = 3.8
ignore_missing_imports = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unreachable = true
show_error_codes = true
show_column_numbers = true
pretty = true

[tool.ruff]
fix = true
unsafe-fixes = true
line-length = 100
output-format = 'grouped'
target-version = 'py38'
exclude = ['examples/']

[tool.ruff.format]
quote-style = 'single'

[tool.ruff.lint]
select = ['B', 'C4', 'C90', 'E', 'F']
ignore = ['B023']

[tool.ruff.lint.isort]
known-first-party = ['tests']

# Wrap lines to 100 chars, but don't error on unwrappable lines until 120 chars
[tool.ruff.lint.pycodestyle]
max-line-length = 120

[tool.typos]
files.extend-exclude = [
    '.all-contributorsrc',
    'CONTRIBUTORS.md',
    'docs/sample_data',
    'tests/sample_data',
]
